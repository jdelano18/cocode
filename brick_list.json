[{"uid":"6956ef5f-0cb7-4c8a-be53-4ff53c0c868a","title":"Pandas select rows containing values","description":"Pandas select rows containing values","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Pandas select rows containing values\"\\n', 'description: \"Pandas select rows containing values\"\\n', 'tags: Pandas, EDA\\n', 'URL:\\n', 'Licence:\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Select Rows Containing Values in Pandas']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': [\"# to select rows containing 'keyword' in column 'my_column'\\n\", \"df[df['my_column'].map(lambda x: 'keyword' in x)]\"]}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Example']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Preliminaries']}, {'cell_type': 'code', 'execution_count': 12, 'metadata': {}, 'outputs': [], 'source': ['import pandas as pd']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Create an example dataframe']}, {'cell_type': 'code', 'execution_count': 16, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>name<\/th>\\n', '      <th>country<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>Jason<\/td>\\n', '      <td>[Syria, Lebanon]<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>1<\/th>\\n', '      <td>Molly<\/td>\\n', '      <td>[Spain, Morocco]<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['    name           country\\n', '0  Jason  [Syria, Lebanon]\\n', '1  Molly  [Spain, Morocco]']}, 'execution_count': 16, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"data = {'name': ['Jason', 'Molly'], \\n\", \"        'country': [['Syria', 'Lebanon'],['Spain', 'Morocco']]}\\n\", 'df = pd.DataFrame(data)\\n', 'df']}, {'cell_type': 'markdown', 'metadata': {}, 'source': [\"### Select all rows containing 'Syria' in the 'country' column\"]}, {'cell_type': 'code', 'execution_count': 17, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>name<\/th>\\n', '      <th>country<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>Jason<\/td>\\n', '      <td>[Syria, Lebanon]<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['    name           country\\n', '0  Jason  [Syria, Lebanon]']}, 'execution_count': 17, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"df[df['country'].map(lambda country: 'Syria' in country)]\"]}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"c6e28efe-fbc8-47b0-adba-a4b50ae01359","title":"Pandas Crosstabs","description":"using the crosstabs method pandas","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Pandas Crosstabs\"\\n', 'description: \"using the crosstabs method pandas\"\\n', 'tags: Pandas, Data Cleaning \/ Preprocessing, EDA\\n', 'URL: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.crosstab.html\\n', 'Licence:\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Pandas Crosstabs']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Import pandas']}, {'cell_type': 'code', 'execution_count': 1, 'metadata': {}, 'outputs': [], 'source': ['import pandas as pd']}, {'cell_type': 'code', 'execution_count': 2, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>regiment<\/th>\\n', '      <th>company<\/th>\\n', '      <th>experience<\/th>\\n', '      <th>name<\/th>\\n', '      <th>preTestScore<\/th>\\n', '      <th>postTestScore<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>Nighthawks<\/td>\\n', '      <td>infantry<\/td>\\n', '      <td>veteran<\/td>\\n', '      <td>Miller<\/td>\\n', '      <td>4<\/td>\\n', '      <td>25<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>1<\/th>\\n', '      <td>Nighthawks<\/td>\\n', '      <td>infantry<\/td>\\n', '      <td>rookie<\/td>\\n', '      <td>Jacobson<\/td>\\n', '      <td>24<\/td>\\n', '      <td>94<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>2<\/th>\\n', '      <td>Nighthawks<\/td>\\n', '      <td>cavalry<\/td>\\n', '      <td>veteran<\/td>\\n', '      <td>Ali<\/td>\\n', '      <td>31<\/td>\\n', '      <td>57<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>3<\/th>\\n', '      <td>Nighthawks<\/td>\\n', '      <td>cavalry<\/td>\\n', '      <td>rookie<\/td>\\n', '      <td>Milner<\/td>\\n', '      <td>2<\/td>\\n', '      <td>62<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>4<\/th>\\n', '      <td>Dragoons<\/td>\\n', '      <td>infantry<\/td>\\n', '      <td>veteran<\/td>\\n', '      <td>Cooze<\/td>\\n', '      <td>3<\/td>\\n', '      <td>70<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>5<\/th>\\n', '      <td>Dragoons<\/td>\\n', '      <td>infantry<\/td>\\n', '      <td>rookie<\/td>\\n', '      <td>Jacon<\/td>\\n', '      <td>4<\/td>\\n', '      <td>25<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>6<\/th>\\n', '      <td>Dragoons<\/td>\\n', '      <td>cavalry<\/td>\\n', '      <td>veteran<\/td>\\n', '      <td>Ryaner<\/td>\\n', '      <td>24<\/td>\\n', '      <td>94<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>7<\/th>\\n', '      <td>Dragoons<\/td>\\n', '      <td>cavalry<\/td>\\n', '      <td>rookie<\/td>\\n', '      <td>Sone<\/td>\\n', '      <td>31<\/td>\\n', '      <td>57<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>8<\/th>\\n', '      <td>Scouts<\/td>\\n', '      <td>infantry<\/td>\\n', '      <td>veteran<\/td>\\n', '      <td>Sloan<\/td>\\n', '      <td>2<\/td>\\n', '      <td>62<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>9<\/th>\\n', '      <td>Scouts<\/td>\\n', '      <td>infantry<\/td>\\n', '      <td>rookie<\/td>\\n', '      <td>Piger<\/td>\\n', '      <td>3<\/td>\\n', '      <td>70<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>10<\/th>\\n', '      <td>Scouts<\/td>\\n', '      <td>cavalry<\/td>\\n', '      <td>veteran<\/td>\\n', '      <td>Riani<\/td>\\n', '      <td>2<\/td>\\n', '      <td>62<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>11<\/th>\\n', '      <td>Scouts<\/td>\\n', '      <td>cavalry<\/td>\\n', '      <td>rookie<\/td>\\n', '      <td>Ali<\/td>\\n', '      <td>3<\/td>\\n', '      <td>70<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['      regiment   company experience      name  preTestScore  postTestScore\\n', '0   Nighthawks  infantry    veteran    Miller             4             25\\n', '1   Nighthawks  infantry     rookie  Jacobson            24             94\\n', '2   Nighthawks   cavalry    veteran       Ali            31             57\\n', '3   Nighthawks   cavalry     rookie    Milner             2             62\\n', '4     Dragoons  infantry    veteran     Cooze             3             70\\n', '5     Dragoons  infantry     rookie     Jacon             4             25\\n', '6     Dragoons   cavalry    veteran    Ryaner            24             94\\n', '7     Dragoons   cavalry     rookie      Sone            31             57\\n', '8       Scouts  infantry    veteran     Sloan             2             62\\n', '9       Scouts  infantry     rookie     Piger             3             70\\n', '10      Scouts   cavalry    veteran     Riani             2             62\\n', '11      Scouts   cavalry     rookie       Ali             3             70']}, 'execution_count': 2, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"raw_data = {'regiment': ['Nighthawks', 'Nighthawks', 'Nighthawks', 'Nighthawks', 'Dragoons', 'Dragoons', 'Dragoons', 'Dragoons', 'Scouts', 'Scouts', 'Scouts', 'Scouts'], \\n\", \"        'company': ['infantry', 'infantry', 'cavalry', 'cavalry', 'infantry', 'infantry', 'cavalry', 'cavalry','infantry', 'infantry', 'cavalry', 'cavalry'], \\n\", \"        'experience': ['veteran', 'rookie', 'veteran', 'rookie', 'veteran', 'rookie', 'veteran', 'rookie','veteran', 'rookie', 'veteran', 'rookie'],\\n\", \"        'name': ['Miller', 'Jacobson', 'Ali', 'Milner', 'Cooze', 'Jacon', 'Ryaner', 'Sone', 'Sloan', 'Piger', 'Riani', 'Ali'], \\n\", \"        'preTestScore': [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3],\\n\", \"        'postTestScore': [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]}\\n\", \"df = pd.DataFrame(raw_data, columns = ['regiment', 'company', 'experience', 'name', 'preTestScore', 'postTestScore'])\\n\", 'df']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Create a crosstab table by company and regiment\\n', '\\n', 'Counting the number of observations by regiment and category']}, {'cell_type': 'code', 'execution_count': 3, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th>company<\/th>\\n', '      <th>cavalry<\/th>\\n', '      <th>infantry<\/th>\\n', '      <th>All<\/th>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>regiment<\/th>\\n', '      <th><\/th>\\n', '      <th><\/th>\\n', '      <th><\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>Dragoons<\/th>\\n', '      <td>2<\/td>\\n', '      <td>2<\/td>\\n', '      <td>4<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Nighthawks<\/th>\\n', '      <td>2<\/td>\\n', '      <td>2<\/td>\\n', '      <td>4<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Scouts<\/th>\\n', '      <td>2<\/td>\\n', '      <td>2<\/td>\\n', '      <td>4<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>All<\/th>\\n', '      <td>6<\/td>\\n', '      <td>6<\/td>\\n', '      <td>12<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['company     cavalry  infantry  All\\n', 'regiment                          \\n', 'Dragoons          2         2    4\\n', 'Nighthawks        2         2    4\\n', 'Scouts            2         2    4\\n', 'All               6         6   12']}, 'execution_count': 3, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['pd.crosstab(df.regiment, df.company, margins=True)']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Create a crosstab of the number of rookie and veteran cavalry and infantry soldiers per regiment']}, {'cell_type': 'code', 'execution_count': 4, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>regiment<\/th>\\n', '      <th>Dragoons<\/th>\\n', '      <th>Nighthawks<\/th>\\n', '      <th>Scouts<\/th>\\n', '      <th>All<\/th>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>company<\/th>\\n', '      <th>experience<\/th>\\n', '      <th><\/th>\\n', '      <th><\/th>\\n', '      <th><\/th>\\n', '      <th><\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th rowspan=\"2\" valign=\"top\">cavalry<\/th>\\n', '      <th>rookie<\/th>\\n', '      <td>1<\/td>\\n', '      <td>1<\/td>\\n', '      <td>1<\/td>\\n', '      <td>3<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>veteran<\/th>\\n', '      <td>1<\/td>\\n', '      <td>1<\/td>\\n', '      <td>1<\/td>\\n', '      <td>3<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th rowspan=\"2\" valign=\"top\">infantry<\/th>\\n', '      <th>rookie<\/th>\\n', '      <td>1<\/td>\\n', '      <td>1<\/td>\\n', '      <td>1<\/td>\\n', '      <td>3<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>veteran<\/th>\\n', '      <td>1<\/td>\\n', '      <td>1<\/td>\\n', '      <td>1<\/td>\\n', '      <td>3<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>All<\/th>\\n', '      <th><\/th>\\n', '      <td>4<\/td>\\n', '      <td>4<\/td>\\n', '      <td>4<\/td>\\n', '      <td>12<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['regiment             Dragoons  Nighthawks  Scouts  All\\n', 'company  experience                                   \\n', 'cavalry  rookie             1           1       1    3\\n', '         veteran            1           1       1    3\\n', 'infantry rookie             1           1       1    3\\n', '         veteran            1           1       1    3\\n', 'All                         4           4       4   12']}, 'execution_count': 4, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['pd.crosstab([df.company, df.experience], df.regiment,  margins=True)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"534abfa2-aa64-4ec5-9600-17b8a1969b58","title":"pandas select rows when the column has certain values","description":"pandas select rows when the column has certain values","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"pandas select rows when the column has certain values\"\\n', 'description: \"pandas select rows when the column has certain values\"\\n', 'tags: Pandas, EDA\\n', 'URL:\\n', 'Licence:\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Select Rows when the Column has Certain Values in Pandas']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': [\"# to get select all rows when 'my_column' has any values in 'my_list'\\n\", \"my_list = ['val1', 'val2','val3']\\n\", 'df[df.my_column.isin(my_list)]']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Example']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Preliminaries']}, {'cell_type': 'code', 'execution_count': 1, 'metadata': {}, 'outputs': [], 'source': ['# Import modules\\n', 'import pandas as pd\\n', '\\n', \"# Set ipython's max row display\\n\", \"pd.set_option('display.max_row', 1000)\\n\", '\\n', \"# Set iPython's max column width to 50\\n\", \"pd.set_option('display.max_columns', 50)\"]}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Create an example dataframe']}, {'cell_type': 'code', 'execution_count': 2, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>name<\/th>\\n', '      <th>year<\/th>\\n', '      <th>reports<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>Cochice<\/th>\\n', '      <td>Jason<\/td>\\n', '      <td>2012<\/td>\\n', '      <td>4<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Pima<\/th>\\n', '      <td>Molly<\/td>\\n', '      <td>2012<\/td>\\n', '      <td>24<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Santa Cruz<\/th>\\n', '      <td>Tina<\/td>\\n', '      <td>2013<\/td>\\n', '      <td>31<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Maricopa<\/th>\\n', '      <td>Jake<\/td>\\n', '      <td>2014<\/td>\\n', '      <td>2<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Yuma<\/th>\\n', '      <td>Amy<\/td>\\n', '      <td>2014<\/td>\\n', '      <td>3<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['             name  year  reports\\n', 'Cochice     Jason  2012        4\\n', 'Pima        Molly  2012       24\\n', 'Santa Cruz   Tina  2013       31\\n', 'Maricopa     Jake  2014        2\\n', 'Yuma          Amy  2014        3']}, 'execution_count': 2, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# Create an example dataframe\\n', \"data = {'name': ['Jason', 'Molly', 'Tina', 'Jake', 'Amy'], \\n\", \"        'year': [2012, 2012, 2013, 2014, 2014], \\n\", \"        'reports': [4, 24, 31, 2, 3]}\\n\", \"df = pd.DataFrame(data, index = ['Cochice', 'Pima', 'Santa Cruz', 'Maricopa', 'Yuma'])\\n\", 'df']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Grab rows based on column values']}, {'cell_type': 'code', 'execution_count': 3, 'metadata': {}, 'outputs': [], 'source': [\"value_list = ['Tina', 'Molly', 'Jason']\"]}, {'cell_type': 'code', 'execution_count': 4, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>name<\/th>\\n', '      <th>year<\/th>\\n', '      <th>reports<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>Cochice<\/th>\\n', '      <td>Jason<\/td>\\n', '      <td>2012<\/td>\\n', '      <td>4<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Pima<\/th>\\n', '      <td>Molly<\/td>\\n', '      <td>2012<\/td>\\n', '      <td>24<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Santa Cruz<\/th>\\n', '      <td>Tina<\/td>\\n', '      <td>2013<\/td>\\n', '      <td>31<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['             name  year  reports\\n', 'Cochice     Jason  2012        4\\n', 'Pima        Molly  2012       24\\n', 'Santa Cruz   Tina  2013       31']}, 'execution_count': 4, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# Grab DataFrame rows where column has certain values\\n', 'df[df.name.isin(value_list)]']}, {'cell_type': 'code', 'execution_count': 5, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>name<\/th>\\n', '      <th>year<\/th>\\n', '      <th>reports<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>Maricopa<\/th>\\n', '      <td>Jake<\/td>\\n', '      <td>2014<\/td>\\n', '      <td>2<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Yuma<\/th>\\n', '      <td>Amy<\/td>\\n', '      <td>2014<\/td>\\n', '      <td>3<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['          name  year  reports\\n', 'Maricopa  Jake  2014        2\\n', 'Yuma       Amy  2014        3']}, 'execution_count': 5, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"# Grab DataFrame rows where column doesn't have certain values\\n\", 'df[~df.name.isin(value_list)]']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"c3be62b0-6ebf-4fdb-86fc-97fae3f17d1a","title":"Converting Prices to Floats in Pandas","description":"Turning a column of prices into floats in pandas","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Converting Prices to Floats in Pandas\"\\n', 'description: \"Turning a column of prices into floats in pandas\"\\n', 'tags: Pandas, Data Cleaning \/ Preprocessing, Regex, Text Processing\\n', 'URL:\\n', 'Licence:\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Converting Prices to Floats in Pandas']}, {'cell_type': 'code', 'execution_count': 32, 'metadata': {}, 'outputs': [], 'source': ['# use the replace method for strings\\n', \"df['price'] = df['price'].apply(lambda x: str(x).replace('$','')).apply(lambda x: str(x).replace(',','')).astype(float)\"]}, {'cell_type': 'code', 'execution_count': 33, 'metadata': {}, 'outputs': [], 'source': ['# use regular expressions\\n', \"df['price'] = df['price'].replace('[\\\\$,]', '', regex=True).astype(float)\"]}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Example']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Preliminaries']}, {'cell_type': 'code', 'execution_count': 28, 'metadata': {}, 'outputs': [], 'source': ['import pandas as pd\\n', 'import re # optional (only used for 2nd example)']}, {'cell_type': 'code', 'execution_count': 29, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>price<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>$7.90<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>1<\/th>\\n', '      <td>$1.23<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>2<\/th>\\n', '      <td>$2.16<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>3<\/th>\\n', '      <td>$1,298.00<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>4<\/th>\\n', '      <td>$1,000,000.00<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['           price\\n', '0          $7.90\\n', '1          $1.23\\n', '2          $2.16\\n', '3      $1,298.00\\n', '4  $1,000,000.00']}, 'execution_count': 29, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# create some price data\\n', \"raw_data = {'price': ['$7.90', '$1.23', '$2.16', '$1,298.00', '$1,000,000.00']}\\n\", \"df = pd.DataFrame(raw_data, columns = ['price'])\\n\", 'df']}, {'cell_type': 'code', 'execution_count': 30, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>price<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>7.90<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>1<\/th>\\n', '      <td>1.23<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>2<\/th>\\n', '      <td>2.16<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>3<\/th>\\n', '      <td>1298.00<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>4<\/th>\\n', '      <td>1000000.00<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['        price\\n', '0        7.90\\n', '1        1.23\\n', '2        2.16\\n', '3     1298.00\\n', '4  1000000.00']}, 'execution_count': 30, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"df['price'] = df['price'].apply(lambda x: str(x).replace('$','')).apply(lambda x: str(x).replace(',','')).astype(float)\\n\", 'df']}, {'cell_type': 'code', 'execution_count': 31, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['0          7.90\\n', '1          1.23\\n', '2          2.16\\n', '3       1298.00\\n', '4    1000000.00\\n', 'Name: price, dtype: float64']}, 'execution_count': 31, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"df['price'].replace('[\\\\$,]', '', regex=True).astype(float)\"]}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"a57e44d4-17fd-4eac-8fcd-092194b6d406","title":"Pandas List the Unique Values in a Column","description":"find the unique values in a column pandas","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Pandas List the Unique Values in a Column\"\\n', 'description: \"find the unique values in a column pandas\"\\n', 'tags: Pandas, Data Cleaning \/ Preprocessing\\n', 'URL:\\n', 'Licence:\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['Special thanks to Bob Haffner for pointing out a better way of doing it.']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# List Unique Values of a Column in Pandas']}, {'cell_type': 'code', 'execution_count': 11, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"array(['Ricky', 'Bobby', 'Tina', 'Fey', 'Forrest', 'Gump'], dtype=object)\"]}, 'execution_count': 11, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"# List unique values in the df['name'] column\\n\", 'df.name.unique()']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Example']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Preliminaries']}, {'cell_type': 'code', 'execution_count': 2, 'metadata': {}, 'outputs': [], 'source': ['# import modules\\n', 'import pandas as pd']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Create an Example DataFrame']}, {'cell_type': 'code', 'execution_count': 9, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>name<\/th>\\n', '      <th>year<\/th>\\n', '      <th>reports<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>Cochice<\/th>\\n', '      <td>Ricky<\/td>\\n', '      <td>2012<\/td>\\n', '      <td>4<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Pima<\/th>\\n', '      <td>Bobby<\/td>\\n', '      <td>2012<\/td>\\n', '      <td>24<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Santa Cruz<\/th>\\n', '      <td>Tina<\/td>\\n', '      <td>2013<\/td>\\n', '      <td>31<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Maricopa<\/th>\\n', '      <td>Fey<\/td>\\n', '      <td>2014<\/td>\\n', '      <td>2<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Yuma<\/th>\\n', '      <td>Forrest<\/td>\\n', '      <td>2014<\/td>\\n', '      <td>3<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Quincy<\/th>\\n', '      <td>Gump<\/td>\\n', '      <td>2019<\/td>\\n', '      <td>9<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['               name  year  reports\\n', 'Cochice       Ricky  2012        4\\n', 'Pima          Bobby  2012       24\\n', 'Santa Cruz     Tina  2013       31\\n', 'Maricopa        Fey  2014        2\\n', 'Yuma        Forrest  2014        3\\n', 'Quincy         Gump  2019        9']}, 'execution_count': 9, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# Create an example dataframe\\n', \"data = {'name': ['Ricky', 'Bobby', 'Tina', 'Fey', 'Forrest', 'Gump'], \\n\", \"        'year': [2012, 2012, 2013, 2014, 2014, 2019], \\n\", \"        'reports': [4, 24, 31, 2, 3, 9]}\\n\", \"df = pd.DataFrame(data, index = ['Cochice', 'Pima', 'Santa Cruz', 'Maricopa', 'Yuma', 'Quincy'])\\n\", 'df']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## List unique values']}, {'cell_type': 'code', 'execution_count': 10, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"array(['Ricky', 'Bobby', 'Tina', 'Fey', 'Forrest', 'Gump'], dtype=object)\"]}, 'execution_count': 10, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"#List unique values in the df['name'] column\\n\", 'df.name.unique()']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"521ee97f-6741-4169-bfc5-55de97c74d8b","title":"Pandas Delete Duplicates","description":"deleting and dropping duplicates pandas","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Pandas Delete Duplicates\"\\n', 'description: \"deleting and dropping duplicates pandas\"\\n', 'tags: Pandas, Data Cleaning \/ Preprocessing\\n', 'URL: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.drop_duplicates.html\\n', 'Licence:\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Delete Duplicates in Pandas']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['# to drop all duplicate rows\\n', 'df.drop_duplicates(keep = False)']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['# Drop duplicates except for the last occurrence\\n', \"df.drop_duplicates(['first_name'], keep='last')\"]}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': [\"# Drop duplicates except for the first occurrence (keep = 'first' by default)\\n\", 'df.drop_duplicates()']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Example']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Import Pandas']}, {'cell_type': 'code', 'execution_count': 4, 'metadata': {}, 'outputs': [], 'source': ['import pandas as pd']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Create dataframe with duplicates']}, {'cell_type': 'code', 'execution_count': 5, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>first_name<\/th>\\n', '      <th>last_name<\/th>\\n', '      <th>age<\/th>\\n', '      <th>preTestScore<\/th>\\n', '      <th>postTestScore<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>Jason<\/td>\\n', '      <td>Miller<\/td>\\n', '      <td>42<\/td>\\n', '      <td>4<\/td>\\n', '      <td>25<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>1<\/th>\\n', '      <td>Jason<\/td>\\n', '      <td>Miller<\/td>\\n', '      <td>42<\/td>\\n', '      <td>4<\/td>\\n', '      <td>25<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>2<\/th>\\n', '      <td>Jason<\/td>\\n', '      <td>Miller<\/td>\\n', '      <td>1111111<\/td>\\n', '      <td>4<\/td>\\n', '      <td>25<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>3<\/th>\\n', '      <td>Tina<\/td>\\n', '      <td>Ali<\/td>\\n', '      <td>36<\/td>\\n', '      <td>31<\/td>\\n', '      <td>57<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>4<\/th>\\n', '      <td>Jake<\/td>\\n', '      <td>Milner<\/td>\\n', '      <td>24<\/td>\\n', '      <td>2<\/td>\\n', '      <td>62<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>5<\/th>\\n', '      <td>Amy<\/td>\\n', '      <td>Cooze<\/td>\\n', '      <td>73<\/td>\\n', '      <td>3<\/td>\\n', '      <td>70<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['  first_name last_name      age  preTestScore  postTestScore\\n', '0      Jason    Miller       42             4             25\\n', '1      Jason    Miller       42             4             25\\n', '2      Jason    Miller  1111111             4             25\\n', '3       Tina       Ali       36            31             57\\n', '4       Jake    Milner       24             2             62\\n', '5        Amy     Cooze       73             3             70']}, 'execution_count': 5, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"raw_data = {'first_name': ['Jason', 'Jason', 'Jason','Tina', 'Jake', 'Amy'], \\n\", \"        'last_name': ['Miller', 'Miller', 'Miller','Ali', 'Milner', 'Cooze'], \\n\", \"        'age': [42, 42, 1111111, 36, 24, 73], \\n\", \"        'preTestScore': [4, 4, 4, 31, 2, 3],\\n\", \"        'postTestScore': [25, 25, 25, 57, 62, 70]}\\n\", \"df = pd.DataFrame(raw_data, columns = ['first_name', 'last_name', 'age', 'preTestScore', 'postTestScore'])\\n\", 'df']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Identify which observations are duplicates']}, {'cell_type': 'code', 'execution_count': 6, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['0    False\\n', '1     True\\n', '2    False\\n', '3    False\\n', '4    False\\n', '5    False\\n', 'dtype: bool']}, 'execution_count': 6, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['df.duplicated()']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Drop duplicates']}, {'cell_type': 'code', 'execution_count': 8, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>first_name<\/th>\\n', '      <th>last_name<\/th>\\n', '      <th>age<\/th>\\n', '      <th>preTestScore<\/th>\\n', '      <th>postTestScore<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>Jason<\/td>\\n', '      <td>Miller<\/td>\\n', '      <td>42<\/td>\\n', '      <td>4<\/td>\\n', '      <td>25<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>2<\/th>\\n', '      <td>Jason<\/td>\\n', '      <td>Miller<\/td>\\n', '      <td>1111111<\/td>\\n', '      <td>4<\/td>\\n', '      <td>25<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>3<\/th>\\n', '      <td>Tina<\/td>\\n', '      <td>Ali<\/td>\\n', '      <td>36<\/td>\\n', '      <td>31<\/td>\\n', '      <td>57<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>4<\/th>\\n', '      <td>Jake<\/td>\\n', '      <td>Milner<\/td>\\n', '      <td>24<\/td>\\n', '      <td>2<\/td>\\n', '      <td>62<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>5<\/th>\\n', '      <td>Amy<\/td>\\n', '      <td>Cooze<\/td>\\n', '      <td>73<\/td>\\n', '      <td>3<\/td>\\n', '      <td>70<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['  first_name last_name      age  preTestScore  postTestScore\\n', '0      Jason    Miller       42             4             25\\n', '2      Jason    Miller  1111111             4             25\\n', '3       Tina       Ali       36            31             57\\n', '4       Jake    Milner       24             2             62\\n', '5        Amy     Cooze       73             3             70']}, 'execution_count': 8, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['df.drop_duplicates()']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Drop duplicates in the first name column, but take the last obs in the duplicated set']}, {'cell_type': 'code', 'execution_count': 5, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style>\\n', '    .dataframe thead tr:only-child th {\\n', '        text-align: right;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: left;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>first_name<\/th>\\n', '      <th>last_name<\/th>\\n', '      <th>age<\/th>\\n', '      <th>preTestScore<\/th>\\n', '      <th>postTestScore<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>2<\/th>\\n', '      <td>Jason<\/td>\\n', '      <td>Miller<\/td>\\n', '      <td>1111111<\/td>\\n', '      <td>4<\/td>\\n', '      <td>25<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>3<\/th>\\n', '      <td>Tina<\/td>\\n', '      <td>Ali<\/td>\\n', '      <td>36<\/td>\\n', '      <td>31<\/td>\\n', '      <td>57<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>4<\/th>\\n', '      <td>Jake<\/td>\\n', '      <td>Milner<\/td>\\n', '      <td>24<\/td>\\n', '      <td>2<\/td>\\n', '      <td>62<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>5<\/th>\\n', '      <td>Amy<\/td>\\n', '      <td>Cooze<\/td>\\n', '      <td>73<\/td>\\n', '      <td>3<\/td>\\n', '      <td>70<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['  first_name last_name      age  preTestScore  postTestScore\\n', '2      Jason    Miller  1111111             4             25\\n', '3       Tina       Ali       36            31             57\\n', '4       Jake    Milner       24             2             62\\n', '5        Amy     Cooze       73             3             70']}, 'execution_count': 5, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"df.drop_duplicates(['first_name'], keep='last')\"]}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"799dfe6c-e985-4f5b-b7d8-6fac5e474e15","title":"Pandas Find Unique Values","description":"Finding unique values in a column pandas","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Pandas Find Unique Values\"\\n', 'description: \"Finding unique values in a column pandas\"\\n', 'tags: Pandas, EDA\\n', 'URL:\\n', 'Licence:\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Find Unique Values in Pandas']}, {'cell_type': 'code', 'execution_count': 6, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"['MAZ-7310', nan, 'Tatra 810', 'ZIS-150']\"]}, 'execution_count': 6, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# Create a list of unique values in df.trucks\\n', \"list(df['trucks'].unique())\"]}, {'cell_type': 'code', 'execution_count': 7, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"[nan, 'ZIS-150', 'Tatra 810', 'MAZ-7310']\"]}, 'execution_count': 7, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# Create a list of unique values by turning the pandas column into a set\\n', 'list(set(df.trucks))']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Example']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Preliminaries']}, {'cell_type': 'code', 'execution_count': 1, 'metadata': {}, 'outputs': [], 'source': ['import pandas as pd\\n', 'import numpy as np']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Create some example truck data']}, {'cell_type': 'code', 'execution_count': 2, 'metadata': {}, 'outputs': [], 'source': [\"raw_data = {'regiment': ['51st', '29th', '2nd', '19th', '12th', '101st', '90th', '30th', '193th', '1st', '94th', '91th'], \\n\", \"            'trucks': ['MAZ-7310', np.nan, 'MAZ-7310', 'MAZ-7310', 'Tatra 810', 'Tatra 810', 'Tatra 810', 'Tatra 810', 'ZIS-150', 'Tatra 810', 'ZIS-150', 'ZIS-150'],\\n\", \"            'tanks': ['Merkava Mark 4', 'Merkava Mark 4', 'Merkava Mark 4', 'Leopard 2A6M', 'Leopard 2A6M', 'Leopard 2A6M', 'Arjun MBT', 'Leopard 2A6M', 'Arjun MBT', 'Arjun MBT', 'Arjun MBT', 'Arjun MBT'],\\n\", \"            'aircraft': ['none', 'none', 'none', 'Harbin Z-9', 'Harbin Z-9', 'none', 'Harbin Z-9', 'SH-60B Seahawk', 'SH-60B Seahawk', 'SH-60B Seahawk', 'SH-60B Seahawk', 'SH-60B Seahawk']}\\n\", '\\n', \"df = pd.DataFrame(raw_data, columns = ['regiment', 'trucks', 'tanks', 'aircraft'])\"]}, {'cell_type': 'code', 'execution_count': 3, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>regiment<\/th>\\n', '      <th>trucks<\/th>\\n', '      <th>tanks<\/th>\\n', '      <th>aircraft<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>51st<\/td>\\n', '      <td>MAZ-7310<\/td>\\n', '      <td>Merkava Mark 4<\/td>\\n', '      <td>none<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>1<\/th>\\n', '      <td>29th<\/td>\\n', '      <td>NaN<\/td>\\n', '      <td>Merkava Mark 4<\/td>\\n', '      <td>none<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>2<\/th>\\n', '      <td>2nd<\/td>\\n', '      <td>MAZ-7310<\/td>\\n', '      <td>Merkava Mark 4<\/td>\\n', '      <td>none<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>3<\/th>\\n', '      <td>19th<\/td>\\n', '      <td>MAZ-7310<\/td>\\n', '      <td>Leopard 2A6M<\/td>\\n', '      <td>Harbin Z-9<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>4<\/th>\\n', '      <td>12th<\/td>\\n', '      <td>Tatra 810<\/td>\\n', '      <td>Leopard 2A6M<\/td>\\n', '      <td>Harbin Z-9<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['  regiment     trucks           tanks    aircraft\\n', '0     51st   MAZ-7310  Merkava Mark 4        none\\n', '1     29th        NaN  Merkava Mark 4        none\\n', '2      2nd   MAZ-7310  Merkava Mark 4        none\\n', '3     19th   MAZ-7310    Leopard 2A6M  Harbin Z-9\\n', '4     12th  Tatra 810    Leopard 2A6M  Harbin Z-9']}, 'execution_count': 3, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# View the top few rows\\n', 'df.head()']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Find unique values in the \"trucks\" column']}, {'cell_type': 'code', 'execution_count': 4, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"[nan, 'ZIS-150', 'Tatra 810', 'MAZ-7310']\"]}, 'execution_count': 4, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# Create a list of unique values by turning the\\n', '# pandas column into a set\\n', 'list(set(df.trucks))']}, {'cell_type': 'code', 'execution_count': 5, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"['MAZ-7310', nan, 'Tatra 810', 'ZIS-150']\"]}, 'execution_count': 5, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# Create a list of unique values in df.trucks\\n', \"list(df['trucks'].unique())\"]}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"06014099-e11c-443e-9f70-cecc642008a9","title":"Pandas Groupy Rows By","description":"grouby in pandas","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Pandas Groupy Rows By\"\\n', 'description: \"grouby in pandas\"\\n', 'tags: Pandas, Data Cleaning \/ Preprocessing\\n', 'URL:\\n', 'Licence:\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Pandas Group Rows By']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': [\"grouping = df['score'].groupby(df['regiment'])\"]}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Example']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Preliminaries']}, {'cell_type': 'code', 'execution_count': 10, 'metadata': {}, 'outputs': [], 'source': ['import pandas as pd']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Create Example DataFrame']}, {'cell_type': 'code', 'execution_count': 4, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>regiment<\/th>\\n', '      <th>company<\/th>\\n', '      <th>name<\/th>\\n', '      <th>preTestScore<\/th>\\n', '      <th>postTestScore<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>Nighthawks<\/td>\\n', '      <td>1st<\/td>\\n', '      <td>Miller<\/td>\\n', '      <td>4<\/td>\\n', '      <td>25<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>1<\/th>\\n', '      <td>Nighthawks<\/td>\\n', '      <td>1st<\/td>\\n', '      <td>Jacobson<\/td>\\n', '      <td>24<\/td>\\n', '      <td>94<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>2<\/th>\\n', '      <td>Nighthawks<\/td>\\n', '      <td>2nd<\/td>\\n', '      <td>Ali<\/td>\\n', '      <td>31<\/td>\\n', '      <td>57<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>3<\/th>\\n', '      <td>Nighthawks<\/td>\\n', '      <td>2nd<\/td>\\n', '      <td>Milner<\/td>\\n', '      <td>2<\/td>\\n', '      <td>62<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>4<\/th>\\n', '      <td>Dragoons<\/td>\\n', '      <td>1st<\/td>\\n', '      <td>Cooze<\/td>\\n', '      <td>3<\/td>\\n', '      <td>70<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>5<\/th>\\n', '      <td>Dragoons<\/td>\\n', '      <td>1st<\/td>\\n', '      <td>Jacon<\/td>\\n', '      <td>4<\/td>\\n', '      <td>25<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>6<\/th>\\n', '      <td>Dragoons<\/td>\\n', '      <td>2nd<\/td>\\n', '      <td>Ryaner<\/td>\\n', '      <td>24<\/td>\\n', '      <td>94<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>7<\/th>\\n', '      <td>Dragoons<\/td>\\n', '      <td>2nd<\/td>\\n', '      <td>Sone<\/td>\\n', '      <td>31<\/td>\\n', '      <td>57<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>8<\/th>\\n', '      <td>Scouts<\/td>\\n', '      <td>1st<\/td>\\n', '      <td>Sloan<\/td>\\n', '      <td>2<\/td>\\n', '      <td>62<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>9<\/th>\\n', '      <td>Scouts<\/td>\\n', '      <td>1st<\/td>\\n', '      <td>Piger<\/td>\\n', '      <td>3<\/td>\\n', '      <td>70<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>10<\/th>\\n', '      <td>Scouts<\/td>\\n', '      <td>2nd<\/td>\\n', '      <td>Riani<\/td>\\n', '      <td>2<\/td>\\n', '      <td>62<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>11<\/th>\\n', '      <td>Scouts<\/td>\\n', '      <td>2nd<\/td>\\n', '      <td>Ali<\/td>\\n', '      <td>3<\/td>\\n', '      <td>70<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['      regiment company      name  preTestScore  postTestScore\\n', '0   Nighthawks     1st    Miller             4             25\\n', '1   Nighthawks     1st  Jacobson            24             94\\n', '2   Nighthawks     2nd       Ali            31             57\\n', '3   Nighthawks     2nd    Milner             2             62\\n', '4     Dragoons     1st     Cooze             3             70\\n', '5     Dragoons     1st     Jacon             4             25\\n', '6     Dragoons     2nd    Ryaner            24             94\\n', '7     Dragoons     2nd      Sone            31             57\\n', '8       Scouts     1st     Sloan             2             62\\n', '9       Scouts     1st     Piger             3             70\\n', '10      Scouts     2nd     Riani             2             62\\n', '11      Scouts     2nd       Ali             3             70']}, 'execution_count': 4, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# Example dataframe\\n', \"raw_data = {'regiment': ['Nighthawks', 'Nighthawks', 'Nighthawks', 'Nighthawks', 'Dragoons', 'Dragoons', 'Dragoons', 'Dragoons', 'Scouts', 'Scouts', 'Scouts', 'Scouts'], \\n\", \"        'company': ['1st', '1st', '2nd', '2nd', '1st', '1st', '2nd', '2nd','1st', '1st', '2nd', '2nd'], \\n\", \"        'name': ['Miller', 'Jacobson', 'Ali', 'Milner', 'Cooze', 'Jacon', 'Ryaner', 'Sone', 'Sloan', 'Piger', 'Riani', 'Ali'], \\n\", \"        'preTestScore': [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3],\\n\", \"        'postTestScore': [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]}\\n\", \"df = pd.DataFrame(raw_data, columns = ['regiment', 'company', 'name', 'preTestScore', 'postTestScore'])\\n\", 'df']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Create Grouping object']}, {'cell_type': 'code', 'execution_count': 8, 'metadata': {}, 'outputs': [], 'source': ['# In other words, create an object that represents that particular grouping. \\n', '# In this case we group pre-test scores by the regiment.\\n', \"regiment_preScore = df['preTestScore'].groupby(df['regiment'])\"]}, {'cell_type': 'code', 'execution_count': 9, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['regiment\\n', 'Dragoons      15.50\\n', 'Nighthawks    15.25\\n', 'Scouts         2.50\\n', 'Name: preTestScore, dtype: float64']}, 'execution_count': 9, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"# Display the mean value of the each regiment's pre-test score\\n\", 'regiment_preScore.mean()']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"10fde436-00d9-4a34-9924-cc1728332c43","title":"Sum The Column of a DataFrame in Pandas","description":"sum the column of a dataframe pandas","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Sum The Column of a DataFrame in Pandas\"\\n', 'description: \"sum the column of a dataframe pandas\"\\n', 'tags: Pandas, Data Cleaning \/ Preprocessing, EDA\\n', 'URL:\\n', 'Licence:\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Sum the Column of a DataFrame in Pandas']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': [\"df['my_column'].sum()\"]}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['***\\n', '## Example']}, {'cell_type': 'markdown', 'metadata': {}, 'source': [\"We will get the sum of column 'd'\"]}, {'cell_type': 'code', 'execution_count': 2, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>a<\/th>\\n', '      <th>b<\/th>\\n', '      <th>c<\/th>\\n', '      <th>d<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>1<\/td>\\n', '      <td>2<\/td>\\n', '      <td>dd<\/td>\\n', '      <td>5<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>1<\/th>\\n', '      <td>2<\/td>\\n', '      <td>3<\/td>\\n', '      <td>ee<\/td>\\n', '      <td>9<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>2<\/th>\\n', '      <td>3<\/td>\\n', '      <td>4<\/td>\\n', '      <td>ff<\/td>\\n', '      <td>1<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['   a  b   c  d\\n', '0  1  2  dd  5\\n', '1  2  3  ee  9\\n', '2  3  4  ff  1']}, 'execution_count': 2, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['import pandas as pd\\n', \"df = pd.DataFrame({'a': [1,2,3], 'b': [2,3,4], 'c':['dd','ee','ff'], 'd':[5,9,1]})\\n\", 'df']}, {'cell_type': 'code', 'execution_count': 3, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['15']}, 'execution_count': 3, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"df['d'].sum()\"]}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"73f6b5bb-ad10-4ff7-bcff-98f80d84640a","title":"Remove a Given Character from a String","description":"removing a character from a string","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Remove a Given Character from a String\"\\n', 'description: \"removing a character from a string\"\\n', 'tags: Data Cleaning \/ Preprocessing, Python Fundamentals, Regex, Pandas\\n', 'URL: \\n', 'Licence:\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Remove a Given Character from a String']}, {'cell_type': 'markdown', 'metadata': {}, 'source': [\"Removing a '$' from a single string\"]}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': [\"'$123.45'.replace('$','')\"]}, {'cell_type': 'markdown', 'metadata': {}, 'source': [\"Removing a '$' from a DataFrame column\"]}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': [\"df['a'] = df['a'].str.replace('$','')\"]}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['***\\n', '## Example 1']}, {'cell_type': 'markdown', 'metadata': {}, 'source': [\"Removing a '$' from a single string\"]}, {'cell_type': 'code', 'execution_count': 1, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"'674'\"]}, 'execution_count': 1, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"old_str = '$674'\\n\", \"new_str = old_str.replace('$','')\\n\", 'new_str']}, {'cell_type': 'markdown', 'metadata': {}, 'source': [' ---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Example 2']}, {'cell_type': 'markdown', 'metadata': {}, 'source': [\"Removing a '$' from a DataFrame column\"]}, {'cell_type': 'code', 'execution_count': 3, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>a<\/th>\\n', '      <th>b<\/th>\\n', '      <th>c<\/th>\\n', '      <th>d<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>$12<\/td>\\n', '      <td>2<\/td>\\n', '      <td>dd<\/td>\\n', '      <td>5<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>1<\/th>\\n', '      <td>$22<\/td>\\n', '      <td>3<\/td>\\n', '      <td>ee<\/td>\\n', '      <td>9<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>2<\/th>\\n', '      <td>$13<\/td>\\n', '      <td>4<\/td>\\n', '      <td>ff<\/td>\\n', '      <td>1<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['     a  b   c  d\\n', '0  $12  2  dd  5\\n', '1  $22  3  ee  9\\n', '2  $13  4  ff  1']}, 'execution_count': 3, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['import pandas as pd\\n', \"df = pd.DataFrame({'a': ['$12','$22','$13'], 'b': [2,3,4], 'c':['dd','ee','ff'], 'd':[5,9,1]})\\n\", 'df']}, {'cell_type': 'code', 'execution_count': 10, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['0    12\\n', '1    22\\n', '2    13\\n', 'Name: a, dtype: object']}, 'execution_count': 10, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"# Note the use of 'str'\\n\", \"df['a'].str.replace('$','')\"]}, {'cell_type': 'code', 'execution_count': 13, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>a<\/th>\\n', '      <th>b<\/th>\\n', '      <th>c<\/th>\\n', '      <th>d<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>12<\/td>\\n', '      <td>2<\/td>\\n', '      <td>dd<\/td>\\n', '      <td>5<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>1<\/th>\\n', '      <td>22<\/td>\\n', '      <td>3<\/td>\\n', '      <td>ee<\/td>\\n', '      <td>9<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>2<\/th>\\n', '      <td>13<\/td>\\n', '      <td>4<\/td>\\n', '      <td>ff<\/td>\\n', '      <td>1<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['    a  b   c  d\\n', '0  12  2  dd  5\\n', '1  22  3  ee  9\\n', '2  13  4  ff  1']}, 'execution_count': 13, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"# This can then be reassigned to column 'a'\\n\", \"df['a'] = df['a'].str.replace('$','')\\n\", 'df']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"beec5c0e-10a0-4cdc-9623-3f52c9d0b293","title":"convert string to float in pandas","description":"how to convert a column of strings to floats with pandas df","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"convert string to float in pandas\"\\n', 'description: \"how to convert a column of strings to floats with pandas df\"\\n', 'tags: Pandas\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Convert String to Float in Pandas']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': [\"df['column'] = df['column'].astype(float)\"]}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['***\\n', '## Example']}, {'cell_type': 'code', 'execution_count': 20, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>int_rate<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>10.65<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>1<\/th>\\n', '      <td>7.90<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['  int_rate\\n', '0    10.65\\n', '1     7.90']}, 'execution_count': 20, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['import pandas as pd\\n', \"df = pd.DataFrame({'int_rate':['10.65','7.90']})\\n\", 'df']}, {'cell_type': 'code', 'execution_count': 21, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['int_rate    float64\\n', 'dtype: object']}, 'execution_count': 21, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"df['int_rate'] = df['int_rate'].astype(float)\\n\", 'df.dtypes']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.5'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"c4d89db2-d0d8-432b-8d57-c2d026e9ae12","title":"Replacing Values in Pandas","description":"Replacing values in pandas dataframe","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Replacing Values in Pandas\"\\n', 'description: \"Replacing values in pandas dataframe\"\\n', 'tags: Pandas, Data Cleaning \/ Preprocessing, Regex, Text Processing\\n', 'URL: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.replace.html\\n', 'Licence:\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Replace Values in Pandas']}, {'cell_type': 'code', 'execution_count': 4, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>first_name<\/th>\\n', '      <th>last_name<\/th>\\n', '      <th>age<\/th>\\n', '      <th>preTestScore<\/th>\\n', '      <th>postTestScore<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>Jason<\/td>\\n', '      <td>Miller<\/td>\\n', '      <td>42<\/td>\\n', '      <td>NaN<\/td>\\n', '      <td>2.0<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>1<\/th>\\n', '      <td>Molly<\/td>\\n', '      <td>Jacobson<\/td>\\n', '      <td>52<\/td>\\n', '      <td>NaN<\/td>\\n', '      <td>2.0<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>2<\/th>\\n', '      <td>Tina<\/td>\\n', '      <td>Ali<\/td>\\n', '      <td>36<\/td>\\n', '      <td>NaN<\/td>\\n', '      <td>NaN<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>3<\/th>\\n', '      <td>Jake<\/td>\\n', '      <td>Milner<\/td>\\n', '      <td>24<\/td>\\n', '      <td>2.0<\/td>\\n', '      <td>2.0<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>4<\/th>\\n', '      <td>Amy<\/td>\\n', '      <td>Cooze<\/td>\\n', '      <td>73<\/td>\\n', '      <td>1.0<\/td>\\n', '      <td>NaN<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['  first_name last_name  age  preTestScore  postTestScore\\n', '0      Jason    Miller   42           NaN            2.0\\n', '1      Molly  Jacobson   52           NaN            2.0\\n', '2       Tina       Ali   36           NaN            NaN\\n', '3       Jake    Milner   24           2.0            2.0\\n', '4        Amy     Cooze   73           1.0            NaN']}, 'execution_count': 4, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# first argument is to_replace and second argument is the value to replace with\\n', 'df.replace(-999, np.nan)']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['The to_replace argument can be a string, dictionary, list, regex, Series, int and more. Read more about the documentation of this fuction here: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.replace.html']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Example']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Import Modules']}, {'cell_type': 'code', 'execution_count': 1, 'metadata': {}, 'outputs': [], 'source': ['import pandas as pd\\n', 'import numpy as np']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Create dataframe']}, {'cell_type': 'code', 'execution_count': 2, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>first_name<\/th>\\n', '      <th>last_name<\/th>\\n', '      <th>age<\/th>\\n', '      <th>preTestScore<\/th>\\n', '      <th>postTestScore<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>Jason<\/td>\\n', '      <td>Miller<\/td>\\n', '      <td>42<\/td>\\n', '      <td>-999<\/td>\\n', '      <td>2<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>1<\/th>\\n', '      <td>Molly<\/td>\\n', '      <td>Jacobson<\/td>\\n', '      <td>52<\/td>\\n', '      <td>-999<\/td>\\n', '      <td>2<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>2<\/th>\\n', '      <td>Tina<\/td>\\n', '      <td>Ali<\/td>\\n', '      <td>36<\/td>\\n', '      <td>-999<\/td>\\n', '      <td>-999<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>3<\/th>\\n', '      <td>Jake<\/td>\\n', '      <td>Milner<\/td>\\n', '      <td>24<\/td>\\n', '      <td>2<\/td>\\n', '      <td>2<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>4<\/th>\\n', '      <td>Amy<\/td>\\n', '      <td>Cooze<\/td>\\n', '      <td>73<\/td>\\n', '      <td>1<\/td>\\n', '      <td>-999<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['  first_name last_name  age  preTestScore  postTestScore\\n', '0      Jason    Miller   42          -999              2\\n', '1      Molly  Jacobson   52          -999              2\\n', '2       Tina       Ali   36          -999           -999\\n', '3       Jake    Milner   24             2              2\\n', '4        Amy     Cooze   73             1           -999']}, 'execution_count': 2, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"raw_data = {'first_name': ['Jason', 'Molly', 'Tina', 'Jake', 'Amy'], \\n\", \"        'last_name': ['Miller', 'Jacobson', 'Ali', 'Milner', 'Cooze'], \\n\", \"        'age': [42, 52, 36, 24, 73], \\n\", \"        'preTestScore': [-999, -999, -999, 2, 1],\\n\", \"        'postTestScore': [2, 2, -999, 2, -999]}\\n\", \"df = pd.DataFrame(raw_data, columns = ['first_name', 'last_name', 'age', 'preTestScore', 'postTestScore'])\\n\", 'df']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Replace all values of -999 with NAN']}, {'cell_type': 'code', 'execution_count': 3, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>first_name<\/th>\\n', '      <th>last_name<\/th>\\n', '      <th>age<\/th>\\n', '      <th>preTestScore<\/th>\\n', '      <th>postTestScore<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>0<\/th>\\n', '      <td>Jason<\/td>\\n', '      <td>Miller<\/td>\\n', '      <td>42<\/td>\\n', '      <td>NaN<\/td>\\n', '      <td>2.0<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>1<\/th>\\n', '      <td>Molly<\/td>\\n', '      <td>Jacobson<\/td>\\n', '      <td>52<\/td>\\n', '      <td>NaN<\/td>\\n', '      <td>2.0<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>2<\/th>\\n', '      <td>Tina<\/td>\\n', '      <td>Ali<\/td>\\n', '      <td>36<\/td>\\n', '      <td>NaN<\/td>\\n', '      <td>NaN<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>3<\/th>\\n', '      <td>Jake<\/td>\\n', '      <td>Milner<\/td>\\n', '      <td>24<\/td>\\n', '      <td>2.0<\/td>\\n', '      <td>2.0<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>4<\/th>\\n', '      <td>Amy<\/td>\\n', '      <td>Cooze<\/td>\\n', '      <td>73<\/td>\\n', '      <td>1.0<\/td>\\n', '      <td>NaN<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['  first_name last_name  age  preTestScore  postTestScore\\n', '0      Jason    Miller   42           NaN            2.0\\n', '1      Molly  Jacobson   52           NaN            2.0\\n', '2       Tina       Ali   36           NaN            NaN\\n', '3       Jake    Milner   24           2.0            2.0\\n', '4        Amy     Cooze   73           1.0            NaN']}, 'execution_count': 3, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['df.replace(-999, np.nan)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"887d76a3-22a3-4c00-aa4c-80e3ae523e57","title":"Change Data Type","description":"Changing the data type for value and column in pandas","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Change Data Type\"\\n', 'description: \"Changing the data type for value and column in pandas\"\\n', 'tags: Pandas, Data Cleaning \/ Preprocessing, Text Processing\\n', 'URL:\\n', 'Licence:\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Change Data Type of Column in Pandas']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['df[\"col\"] = df[\"col\"].astype(type)']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Example']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Preliminaries']}, {'cell_type': 'code', 'execution_count': 41, 'metadata': {}, 'outputs': [], 'source': ['import pandas as pd']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### Create some example data']}, {'cell_type': 'code', 'execution_count': 42, 'metadata': {}, 'outputs': [{'data': {'text\/html': ['<div>\\n', '<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '<\/style>\\n', '<table border=\"1\" class=\"dataframe\">\\n', '  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th><\/th>\\n', '      <th>name<\/th>\\n', '      <th>year<\/th>\\n', '      <th>reports<\/th>\\n', '      <th>coverage<\/th>\\n', '    <\/tr>\\n', '  <\/thead>\\n', '  <tbody>\\n', '    <tr>\\n', '      <th>Cochice<\/th>\\n', '      <td>Jason<\/td>\\n', '      <td>2012<\/td>\\n', '      <td>4<\/td>\\n', '      <td>25<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Pima<\/th>\\n', '      <td>Molly<\/td>\\n', '      <td>2012<\/td>\\n', '      <td>24<\/td>\\n', '      <td>94<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Santa Cruz<\/th>\\n', '      <td>Tina<\/td>\\n', '      <td>2013<\/td>\\n', '      <td>31<\/td>\\n', '      <td>57<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Maricopa<\/th>\\n', '      <td>Jake<\/td>\\n', '      <td>2014<\/td>\\n', '      <td>2<\/td>\\n', '      <td>62<\/td>\\n', '    <\/tr>\\n', '    <tr>\\n', '      <th>Yuma<\/th>\\n', '      <td>Amy<\/td>\\n', '      <td>2014<\/td>\\n', '      <td>3<\/td>\\n', '      <td>70<\/td>\\n', '    <\/tr>\\n', '  <\/tbody>\\n', '<\/table>\\n', '<\/div>'], 'text\/plain': ['             name  year  reports coverage\\n', 'Cochice     Jason  2012        4       25\\n', 'Pima        Molly  2012       24       94\\n', 'Santa Cruz   Tina  2013       31       57\\n', 'Maricopa     Jake  2014        2       62\\n', 'Yuma          Amy  2014        3       70']}, 'execution_count': 42, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"data = {'name': ['Jason', 'Molly', 'Tina', 'Jake', 'Amy'], \\n\", \"        'year': [2012, 2012, 2013, 2014, 2014], \\n\", \"        'reports': [4, 24, 31, 2, 3],\\n\", '        \\'coverage\\': [\"25\", \"94\", \"57\", \"62\", \"70\"]}\\n', \"df = pd.DataFrame(data, index = ['Cochice', 'Pima', 'Santa Cruz', 'Maricopa', 'Yuma'])\\n\", 'df']}, {'cell_type': 'code', 'execution_count': 43, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['name        object\\n', 'year         int64\\n', 'reports      int64\\n', 'coverage     int64\\n', 'dtype: object']}, 'execution_count': 43, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# Convert a series to python int\\n', 'df[\"coverage\"] = df[\"coverage\"].astype(int)\\n', 'df.dtypes']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.5'}}, 'nbformat': 4, 'nbformat_minor': 1}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"f2c0e09c-df53-4c6a-8bdc-9a64fcea8ab9","title":"Replace Characters","description":"replacing characters in a string","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Replace Characters\"\\n', 'description: \"replacing characters in a string\"\\n', 'tags: Data Cleaning \/ Preprocessing, Text Processing, Regex, Python Fundamentals\\n', 'URL:\\n', 'Licence:\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Replace Characters in a String']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Replace Character (Method 1)']}, {'cell_type': 'code', 'execution_count': 5, 'metadata': {'scrolled': True}, 'outputs': [{'data': {'text\/plain': [\"['Interrobang By Aishwarya Henriette',\\n\", \" 'Parking And Going By Karl Gautier',\\n\", \" 'Today Is The night By Jarek Prakash']\"]}, 'execution_count': 5, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# create text\\n', \"text_data = ['Interrobang. By Aishwarya Henriette',\\n\", \"             'Parking And Going. By Karl Gautier',\\n\", \"             'Today Is The night. By Jarek Prakash']\\n\", '\\n', '# Remove periods\\n', \"remove_periods = [string.replace('.', '') for string in text_data]\\n\", '\\n', '# Show text\\n', 'remove_periods']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Replace Character (Method 2)']}, {'cell_type': 'code', 'execution_count': 6, 'metadata': {'collapsed': True}, 'outputs': [], 'source': ['# Import library\\n', 'import re\\n', '\\n', '# create text\\n', \"text_data = ['Interrobang. By Aishwarya Henriette',\\n\", \"             'Parking And Going. By Karl Gautier',\\n\", \"             'Today Is The night. By Jarek Prakash']\"]}, {'cell_type': 'code', 'execution_count': 7, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"['XXXXXXXXXXX XX XXXXXXXXX XXXXXXXXX',\\n\", \" 'XXXXXXX XXX XXXXX XX XXXX XXXXXXX',\\n\", \" 'XXXXX XX XXX XXXXX XX XXXXX XXXXXXX']\"]}, 'execution_count': 7, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# Create function\\n', 'def replace_letters_with_X(string: str) -> str:\\n', \"    return re.sub(r'[a-zA-Z]', 'X', string)\\n\", '\\n', '# Apply function\\n', '[replace_letters_with_X(string) for string in remove_periods]']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"1fa783d8-74a0-4154-b844-e18199098b61","title":"Remove and Return an Element from a List","description":"Understand how to remove and return a value from an index in a list with the pop method","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Remove and Return an Element from a List\"\\n', 'description: \"Understand how to remove and return a value from an index in a list with the pop method\"\\n', 'tags: Python Fundamentals, Lists\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['# returns and removes last element by default\\n', 'your_list.pop() ']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['# specify the index\\n', 'your_list.pop(index)']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'code', 'execution_count': 19, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]']}, 'execution_count': 19, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# example list of numbers 1 thru 10\\n', 'first10 = [i for i in range(1, 10+1)]\\n', 'first10']}, {'cell_type': 'code', 'execution_count': 20, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['10\\n']}], 'source': ['# remove the last\\n', 'last = first10.pop()\\n', 'print(last)']}, {'cell_type': 'code', 'execution_count': 21, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['1']}, 'execution_count': 21, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# remove the first\\n', 'first10.pop(0)']}, {'cell_type': 'code', 'execution_count': 22, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['[2, 3, 4, 5, 6, 7, 8, 9]\\n']}], 'source': ['# look at list now\\n', 'print(first10)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"cb3be08f-72c0-463b-864e-d67c74b319d9","title":"Modulo (mod) Operator in Python","description":"using the modulo operator","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Modulo (mod) Operator in Python\"\\n', 'description: \"using the modulo operator\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 10, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['1']}, 'execution_count': 10, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# for you mathematicians, this equals 7 (mod 3)\\n', '7 % 3']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"53ed6786-0e38-42ad-ac39-ccad587764b2","title":"Comments in Python","description":"how to add comments to code in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Comments in Python\"\\n', 'description: \"how to add comments to code in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['# Single line comments start with a number symbol.\\n', '\\n', '\"\"\" Multiline strings can be written\\n', '    using three \"s, and are often used\\n', '    as documentation.\\n', '\"\"\"']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"df8c7ec8-8bfe-4de2-9b32-6e2455e8cfad","title":"Absolute Value Operator in Python","description":"how to take the absolute value of a number in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Absolute Value Operator in Python\"\\n', 'description: \"how to take the absolute value of a number in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"abs\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 20, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['4']}, 'execution_count': 20, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# absolute value calculated using abs\\n', 'abs(-4)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"9d031aa5-93b5-4b3e-8ac7-4cf4fe8cbbac","title":"Square Root Operation in Python","description":"how to calculate the square root of a number using the math module in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Square Root Operation in Python\"\\n', 'description: \"how to calculate the square root of a number using the math module in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"sqrt\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 17, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['9.0']}, 'execution_count': 17, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['from math import sqrt\\n', 'sqrt(81)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"fe728de2-3924-4f32-8f97-1b058cccd7d7","title":"What is a Dictionary","description":"Basics of the dictionary data structure in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"What is a Dictionary\"\\n', 'description: \"Basics of the dictionary data structure in python\"\\n', 'tags: Python Fundamentals, Dictionaries\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Dictionaries store mappings from keys to values']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['Note keys for dictionaries have to be immutable types. This is to ensure that the key can be converted to a constant hash value for quick look-ups. Immutable types include ints, floats, strings, tuples.']}, {'cell_type': 'code', 'execution_count': 22, 'metadata': {}, 'outputs': [], 'source': ['empty_dict = {}\\n', 'filled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['invalid_dict = {[1,2,3]: \"123\"}  # => Raises a TypeError: unhashable type: \\'list\\'\\n', 'valid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"c7aa70e0-d257-44e6-b11e-292a4bb2ef87","title":"Multiplication Operator in Python","description":"how to multiply numbers in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Multiplication Operator in Python\"\\n', 'description: \"how to multiply numbers in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"times multiply\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 3, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['20']}, 'execution_count': 3, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"# multiplication is what you'd probably expect\\n\", '10 * 2']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"758237a8-b8bf-4b81-829e-4b128d6382b4","title":"Get Value from a Key in a Dictionary","description":"How to look up a value from a key in a dictionary in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Get Value from a Key in a Dictionary\"\\n', 'description: \"How to look up a value from a key in a dictionary in python\"\\n', 'tags: Python Fundamentals, Dictionaries\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['# If key does not exist, this will raise a KeyError\\n', \"dictionary['key']\"]}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': [\"# If key does not exist, this *won't* raise a KeyError\\n\", '# Instead, it will return None\\n', 'dictionary.get(\"key\")\\n', '\\n', \"# Instead of None, this will return 'not there' if key doesn't exist\\n\", 'dictionary.get(\"key\", \"not there\")']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['# create example dictionary\\n', 'd = {1:2, 2:8, 3:26, 4:80, 5:242}']}, {'cell_type': 'code', 'execution_count': 16, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['80\\n', '80\\n']}], 'source': ['print(d.get(4))\\n', 'print(d[4])']}, {'cell_type': 'code', 'execution_count': 18, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['not there\\n']}, {'ename': 'KeyError', 'evalue': '6', 'output_type': 'error', 'traceback': ['\\x1b[0;31m---------------------------------------------------------------------------\\x1b[0m', '\\x1b[0;31mKeyError\\x1b[0m                                  Traceback (most recent call last)', '\\x1b[0;32m<ipython-input-18-e59f81da4f5c>\\x1b[0m in \\x1b[0;36m<module>\\x1b[0;34m()\\x1b[0m\\n\\x1b[1;32m      1\\x1b[0m \\x1b[0mprint\\x1b[0m\\x1b[0;34m(\\x1b[0m\\x1b[0md\\x1b[0m\\x1b[0;34m.\\x1b[0m\\x1b[0mget\\x1b[0m\\x1b[0;34m(\\x1b[0m\\x1b[0;36m6\\x1b[0m\\x1b[0;34m,\\x1b[0m \\x1b[0;34m\"not there\"\\x1b[0m\\x1b[0;34m)\\x1b[0m\\x1b[0;34m)\\x1b[0m\\x1b[0;34m\\x1b[0m\\x1b[0m\\n\\x1b[0;32m----> 2\\x1b[0;31m \\x1b[0mprint\\x1b[0m\\x1b[0;34m(\\x1b[0m\\x1b[0md\\x1b[0m\\x1b[0;34m[\\x1b[0m\\x1b[0;36m6\\x1b[0m\\x1b[0;34m]\\x1b[0m\\x1b[0;34m)\\x1b[0m\\x1b[0;34m\\x1b[0m\\x1b[0m\\n\\x1b[0m', '\\x1b[0;31mKeyError\\x1b[0m: 6']}], 'source': ['print(d.get(6, \"not there\"))\\n', 'print(d[6])']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"7121d33d-99c1-4a94-ac99-0da0dbd33bd4","title":"Default Parameter Value of a Function","description":"Understand how to make a function with a default parameter value. This means that the function can be called without a particular parameter.","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Default Parameter Value of a Function\"\\n', 'description: \"Understand how to make a function with a default parameter value. This means that the function can be called without a particular parameter.\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['If no value is passed for the default_value, var will equal the default_value. Otherwise, var will equal whatever value you pass into the function.']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['def my_function(var = default_value):\\n', '    pass']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'code', 'execution_count': 80, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['hi mom\\n', 'hi grandma\\n']}], 'source': ['def my_function(name = \"mom\"):\\n', '    print(f\"hi {name}\")\\n', '    \\n', 'my_function()\\n', 'my_function(\"grandma\")']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"fa7f26c7-eacb-4891-ad5c-973dd0bc4d67","title":"Error Handling: The Else Block","description":"When handling excpetions with a try-except block, the try block should only contain code that may cause an error. Any code that depends on the try block running successfully should be placed in the else block. Understand how to use this else block.","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Error Handling: The Else Block\"\\n', 'description: \"When handling excpetions with a try-except block, the try block should only contain code that may cause an error. Any code that depends on the try block running successfully should be placed in the else block. Understand how to use this else block.\"\\n', 'tags: Python Fundamentals, Error Handling\\n', 'URL: http:\/\/ehmatthes.github.io\/pcc\/cheatsheets\/README.html\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['The ```else``` block should contain any code that depends on the ```try``` block running successfully. ']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'code', 'execution_count': 18, 'metadata': {}, 'outputs': [], 'source': ['def try_to_divide(num, denom):\\n', '    try:\\n', '        result = int(num) \/ int(denom)\\n', '    except ZeroDivisionError:\\n', '        print(\"You can\\'t divide by zero!\")\\n', '    else:\\n', '        print(result)']}, {'cell_type': 'code', 'execution_count': 20, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['3.0\\n']}], 'source': ['try_to_divide(6, 2)']}, {'cell_type': 'code', 'execution_count': 21, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': [\"You can't divide by zero!\\n\"]}], 'source': ['try_to_divide(6, 0)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"7cdee435-7e7f-49b5-8ba4-71f92fce7698","title":"Indexing and Slicing","description":"how to index and slice strings, lists, and tuples in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Indexing and Slicing\"\\n', 'description: \"how to index and slice strings, lists, and tuples in python\"\\n', 'tags: Python Fundamentals, Lists\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': [\"## The start index is included, the end index is not. (It's a closed\/open range for you mathy types.)\"]}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['list_or_string[start:end:step]']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Get any one element from 0 up to len(object) - 1']}, {'cell_type': 'code', 'execution_count': 41, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['T\\n', 'g\\n']}], 'source': ['s = \"This is a string\"\\n', 'print(s[0])\\n', 'print(s[len(s)-1])']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Omit the beginning and return the rest']}, {'cell_type': 'code', 'execution_count': 4, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['[7, 9, 11, 13, 15, 17, 19]']}, 'execution_count': 4, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['l = [1,3,5,7,9,11,13,15,17,19]\\n', 'print(l[2:])']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Omit the end and return the rest']}, {'cell_type': 'code', 'execution_count': 5, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['[1, 5, 7]']}, 'execution_count': 5, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['l[:3]']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Select every second entry']}, {'cell_type': 'code', 'execution_count': 42, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"('a', 'c', 'e', 'g')\"]}, 'execution_count': 42, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"t = ('a','b','c','d','e','f','g')\\n\", 't[::2]']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Return a reversed copy']}, {'cell_type': 'code', 'execution_count': 43, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"('g', 'f', 'e', 'd', 'c', 'b', 'a')\"]}, 'execution_count': 43, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['t[::-1]']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"4174283f-0812-4c86-bfcb-d60ef086e002","title":"Length Method for an Object in Python","description":"Understand how to use the built-in length method that most python objects have","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Length Method for an Object in Python\"\\n', 'description: \"Understand how to use the built-in length method that most python objects have\"\\n', 'tags: Python Fundamentals, Lists\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['Many python objects (like lists, sets, strings, tuples, and more) have a built-in ```__len__()``` method that can be called by ```len(object)```']}, {'cell_type': 'code', 'execution_count': 36, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['True\\n', '5\\n']}], 'source': ['print(len(\"this string\") == \"this string\".__len__())\\n', 'print(len([\"of\", \"this\", \"list\", \"of\", \"strings\"]))']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"ecf534d0-8307-40e1-8f0b-5f2c048ee209","title":"Creating and Calling a Function in Python","description":"How to create and call a basic function in python.","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Creating and Calling a Function in Python\"\\n', 'description: \"How to create and call a basic function in python.\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': [\"A function is a block of code that only runs when it's called. You can pass variables, known as parameters, into a function. Functions can also return variable(s). \"]}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['In Python, a function is defined by the ```def``` keyword.']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 24, 'metadata': {}, 'outputs': [], 'source': ['def a_function():\\n', '    pass']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'code', 'execution_count': 71, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['hi mom\\n']}], 'source': ['def my_function():\\n', '    print(\"hi mom\")\\n', '    \\n', 'my_function()']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Adding parameters']}, {'cell_type': 'code', 'execution_count': 72, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['7 + 2 = 9\\n']}], 'source': ['def add(x, y):\\n', '    print(f\"{x} + {y} = {x+y}\")\\n', '\\n', 'add(7,2)']}, {'cell_type': 'code', 'execution_count': 73, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['5 + 6 = 11\\n']}], 'source': ['# Another way to call functions is with keyword arguments\\n', 'add(y=6, x=5)  # Keyword arguments can arrive in any order.']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Returning multiple values (with tuple assignments)']}, {'cell_type': 'code', 'execution_count': 75, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['2.0\\n', '50\\n']}], 'source': ['def my_function(x):\\n', '    return x\/5, x*5  # Return multiple values as a tuple without the parenthesis.\\n', '                     # (Note: parenthesis have been excluded but can be included)\\n', '\\n', 'x,y = my_function(10)\\n', 'print(x)\\n', 'print(y)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"feb26b31-db82-4745-abec-723866e0cab2","title":"Set Intersection Operation","description":"Calculating the intersection of multiple sets with the set intersection operation in python.","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Set Intersection Operation\"\\n', 'description: \"Calculating the intersection of multiple sets with the set intersection operation in python.\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['some_set & other_set & another_one...']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'code', 'execution_count': 8, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['{3, 5, 7, 11, 13}']}, 'execution_count': 8, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['primes = {2,3,5,7,11,13}\\n', 'odds = {1,3,5,7,9,11,13}\\n', 'primes & odds']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"efe86818-559e-48e9-a82b-a85c68a781e7","title":"Range in Python","description":"Understand how to use the range function in python. Range returns an iterable of numbers from 0 up to but not including the given number.","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Range in Python\"\\n', 'description: \"Understand how to use the range function in python. Range returns an iterable of numbers from 0 up to but not including the given number.\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['# iterable from lower up to but not including upper\\n', '# by default lower = 0 and step = 1\\n', 'range(lower, upper, step)']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'code', 'execution_count': 46, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['0\\n', '1\\n', '2\\n', '3\\n']}], 'source': ['for i in range(4):\\n', '    print(i)']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'code', 'execution_count': 48, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['4\\n', '5\\n', '6\\n', '7\\n']}], 'source': ['for i in range(4, 8):\\n', '    print(i)']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'code', 'execution_count': 51, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['4\\n', '6\\n', '8\\n']}], 'source': ['# If step is not indicated, the default value is 1.\\n', 'for i in range(4, 10, 2):\\n', '    print(i)']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Using a negative number for the step will reverse the numbers']}, {'cell_type': 'code', 'execution_count': 56, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['5\\n', '4\\n', '3\\n', '2\\n']}], 'source': ['for i in range(5,1, -1):\\n', '    print(i)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"285c1f48-12da-4782-a4e6-4de1aae48e74","title":"If, Elif, and Else","description":"How to use the basic if elif and else conditional tests in python.","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"If, Elif, and Else\"\\n', 'description: \"How to use the basic if elif and else conditional tests in python.\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/ http:\/\/ehmatthes.github.io\/pcc\/cheatsheets\/README.html\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['A conditional test is an expression that can be evaluated as\\n', 'True or False. Python uses the values True and False to\\n', 'decide whether the code in an if statement should be\\n', 'executed.']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['Several kinds of ```if``` statements exist. Your choice of which to\\n', 'use depends on the number of conditions you need to test.\\n', 'You can have as many ```elif``` blocks as you need, and the\\n', '```else``` block is always optional.']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Simple if statement']}, {'cell_type': 'code', 'execution_count': 61, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': [\"You're old enough to vote!\\n\"]}], 'source': ['age = 19\\n', 'if age >= 18:\\n', '    print(\"You\\'re old enough to vote!\")']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## If-else statement']}, {'cell_type': 'code', 'execution_count': 62, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': [\"You can't vote yet.\\n\"]}], 'source': ['age = 17\\n', 'if age >= 18:\\n', '    print(\"You\\'re old enough to vote!\")\\n', 'else:\\n', '    print(\"You can\\'t vote yet.\")']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## If-elif-else statement']}, {'cell_type': 'code', 'execution_count': 63, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['Your cost is $5.\\n']}], 'source': ['age = 12\\n', 'if age < 4:\\n', '    price = 0\\n', 'elif age < 18:\\n', '    price = 5\\n', 'else:\\n', '    price = 10\\n', 'print(\"Your cost is $\" + str(price) + \".\")']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"f844bf12-0b38-40a8-b68a-c4f78f05f406","title":"Addition Operator in Python","description":"how to add numbers in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Addition Operator in Python\"\\n', 'description: \"how to add numbers in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"addition adding add\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 1, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['2']}, 'execution_count': 1, 'metadata': {}, 'output_type': 'execute_result'}], 'source': [\"# addition is what you'd probably expect\\n\", '1 + 1']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"042f9ab7-19ea-4d09-a7e1-c5ac5defaf49","title":"Sin Operation in Python","description":"how to calculate sin of a value using the math module in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Sin Operation in Python\"\\n', 'description: \"how to calculate sin of a value using the math module in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"sine\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 8, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['1.0']}, 'execution_count': 8, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['from math import sin, pi\\n', 'sin(pi\/2)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"cbc3dd10-d145-4e06-a493-04ce78cb32a8","title":"Negate a Boolean","description":"using the not keyword to negate a boolean value","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Negate a Boolean\"\\n', 'description: \"using the not keyword to negate a boolean value\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"True False\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['not True   # => False\\n', '\"good\" not in \"this is an excellent example\"   # => True']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"22c3cd4a-65fa-44a7-b985-8c5122a6dd89","title":"Log Operation in Python","description":"how to calculate the log of any number for any base number in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Log Operation in Python\"\\n', 'description: \"how to calculate the log of any number for any base number in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 19, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['1.0']}, 'execution_count': 19, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['from math import log, e\\n', '# the default is the natural log (log base e)\\n', 'log(e) ']}, {'cell_type': 'code', 'execution_count': 25, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['2.0']}, 'execution_count': 25, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# you can specify your own base as the second argument\\n', 'log(100, 10)']}, {'cell_type': 'code', 'execution_count': 20, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['3.0']}, 'execution_count': 20, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# the math module has methods for other common log operations\\n', 'from math import log2, log10\\n', 'log2(8)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"7552940c-1dad-4e2a-b4f8-515999e40d62","title":"List of Keys and Values in a Dictionary","description":"How to get a list of the keys and values in a dictionary in python.","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"List of Keys and Values in a Dictionary\"\\n', 'description: \"How to get a list of the keys and values in a dictionary in python.\"\\n', 'tags: Python Fundamentals, Dictionaries\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['You can get all keys as an iterable with \"keys()\". We need to wrap the call in list() to turn it into a list. <br> <br>\\n', 'Note - for Python versions <3.7, dictionary key ordering is not guaranteed. Your results might not match the example below exactly. However, as of Python 3.7, dictionary items maintain the order at which they are inserted into the dictionary.']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['# Wrap in list() to get it out of the iterable.\\n', 'list(dictionary.keys())  # => [\"one\", \"two\", \"three\"] in Python 3.7+\\n', 'list(dictionary.keys())  # => [\"three\", \"two\", \"one\"] in Python <3.7']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['list(dictionary.values())  # => [1, 2, 3] in Python 3.7+\\n', 'list(dictionary.values())  # => [3, 2, 1]  in Python <3.7']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Create example dictionary']}, {'cell_type': 'code', 'execution_count': 19, 'metadata': {}, 'outputs': [], 'source': ['tigers_majors = {\"the masters\": 5, \"pga championship\": 4, \"us open\": 3, \"the open championship\" : 3}']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Get lists of keys and values']}, {'cell_type': 'code', 'execution_count': 20, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"['the masters', 'pga championship', 'us open', 'the open championship']\"]}, 'execution_count': 20, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['list(tigers_majors.keys())']}, {'cell_type': 'code', 'execution_count': 21, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['[5, 4, 3, 3]']}, 'execution_count': 21, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['list(tigers_majors.values())']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"df012cb7-d40e-41ee-a3e2-39520e1e70fe","title":"Error Handling: Failing Silently","description":"When handling excpetions with a try-except block, sometimes you want your program to just continue running when it encounters an error, without reporting the error to the user. Understand how to make your program fail silently.","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Error Handling: Failing Silently\"\\n', 'description: \"When handling excpetions with a try-except block, sometimes you want your program to just continue running when it encounters an error, without reporting the error to the user. Understand how to make your program fail silently.\"\\n', 'tags: Python Fundamentals, Error Handling\\n', 'URL: http:\/\/ehmatthes.github.io\/pcc\/cheatsheets\/README.html\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['Using the ```pass``` statement in an else block allows you to fail silently.']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'code', 'execution_count': 23, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['alice.txt has 12348 lines.\\n', 'moby_dick.txt has 23233 lines.\\n', 'little_woman.txt has 19206 lines.\\n']}], 'source': [\"f_names = ['alice.txt', 'siddhartha.txt','moby_dick.txt', 'little_women.txt']\\n\", 'for f_name in f_names:\\n', ' # Note: I just made up random numbers for the number of lines\\n', ' #       These are not accurate unless I was really lucky\\n', '    try:\\n', '        with open(f_name) as f_obj:\\n', '            lines = f_obj.readlines()\\n', '    except FileNotFoundError:\\n', '            # Just move on to the next file.\\n', '        pass\\n', '    else:\\n', '        num_lines = len(lines)\\n', '        msg = f\"{f_name} has {num_lines} lines.\"\\n', '        print(msg)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"6bbbf4c6-f4b9-4b0c-811f-ac59cc3a38fc","title":"Floor Operation in Python","description":"how to calculate the floor of a number using the math module in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Floor Operation in Python\"\\n', 'description: \"how to calculate the floor of a number using the math module in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 22, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['4']}, 'execution_count': 22, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['from math import floor\\n', 'floor(4.6)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"24a9418f-27ec-4c89-9f62-f7ef74edd260","title":"Exponentiation Operator in Python","description":"how to use exponents in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Exponentiation Operator in Python\"\\n', 'description: \"how to use exponents in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"exponents exponentiation raise to the power of\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 11, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['16']}, 'execution_count': 11, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['2**4']}, {'cell_type': 'code', 'execution_count': 21, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['243.0']}, 'execution_count': 21, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['pow(3,5)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"86cfa3ca-fc83-4989-b4c0-ecf0567c07e2","title":"Add a Value to a Set","description":"How to add a value to a set in python.","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Add a Value to a Set\"\\n', 'description: \"How to add a value to a set in python.\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 32, 'metadata': {}, 'outputs': [], 'source': ['some_set.add(value)']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'code', 'execution_count': 5, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['{1, 3, 4, 5, 8, 9, 35, 67, 90, 254, 3345}']}, 'execution_count': 5, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['some_set = {3,4,5,67,8,9,90,254,3345,35}\\n', 'some_set.add(1)\\n', 'some_set']}, {'cell_type': 'code', 'execution_count': 6, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['{1, 3, 4, 5, 8, 9, 35, 67, 90, 254, 3345}']}, 'execution_count': 6, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['some_set.add(35)\\n', 'some_set']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"5dd20bc7-6fa1-400c-97e3-55a34200ee6a","title":"Make a Copy or Clone of a List Python","description":"understand different ways to make a copy or a clone of a list in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Make a Copy or Clone of a List Python\"\\n', 'description: \"understand different ways to make a copy or a clone of a list in python\"\\n', 'tags: Python Fundamentals, Lists\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['**WARNING:** ```new_list = old_list``` does not work. This assignment just copies a refrence to the ```old_list``` so any update to ```old_list``` will modify ```new_list``` since they point to the same object in memory.']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['There are multiple ways to do this correctly, however.']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['# use the .copy() method\\n', 'new_list = old_list.copy()']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['# slice all the elements in the list\\n', 'new_list = old_list[:]']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['# use built in list() function\\n', 'new_list = list(old_list)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"82d3aca7-b1d3-43b8-ab55-e7be99dc7c9f","title":"Tan Operation in Python","description":"how to calculate tan of a value using the math module in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Tan Operation in Python\"\\n', 'description: \"how to calculate tan of a value using the math module in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"tangent\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 16, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['1.7320508075688767']}, 'execution_count': 16, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['from math import tan, pi\\n', 'tan(pi\/3)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"b87e9b47-f8ae-4581-88a6-48ce613c8dad","title":"Cos Operation in Python","description":"how to calculate cos of a value using the math module in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Cos Operation in Python\"\\n', 'description: \"how to calculate cos of a value using the math module in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"cosine\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 11, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['1.0']}, 'execution_count': 11, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['from math import cos\\n', 'cos(0)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"33727638-c355-48f7-ae7f-df1b8b9b66ab","title":"Boolean Operators","description":"how to use the boolean operators 'and' and 'or' in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Boolean Operators\"\\n', 'description: \"how to use the boolean operators \\'and\\' and \\'or\\' in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/en.wikipedia.org\/wiki\/Truth_table#Logical_conjunction_(AND) https:\/\/en.wikipedia.org\/wiki\/Truth_table#Logical_disjunction_(OR)\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['# Note: \"and\" and \"or\" are case-sensitive\\n', 'True and False  # => False\\n', 'False or True   # => True']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Learn More&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': [\"Learn more about truth tables and for 'and' and 'or' here: https:\/\/en.wikipedia.org\/wiki\/Truth_table#Logical_conjunction_(AND) https:\/\/en.wikipedia.org\/wiki\/Truth_table#Logical_disjunction_(OR)\"]}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"fa8824be-b44a-4af2-8127-1e60f938431c","title":"Integer Division Operator in Python","description":"how to divide without a remainder using the integer division operator","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Integer Division Operator in Python\"\\n', 'description: \"how to divide without a remainder using the integer division operator\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"rounding division\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 3, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['1']}, 'execution_count': 3, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# integer division rounds down for positive and negative numbers\\n', '5 \/\/ 3']}, {'cell_type': 'code', 'execution_count': 5, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['-2.0']}, 'execution_count': 5, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['-5.0 \/\/ 3.0']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"8ba26130-a617-4151-b6c8-db9bf6e94d30","title":"None Object in Python","description":"understanding what None means in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"None Object in Python\"\\n', 'description: \"understanding what None means in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['### None is an object of type NoneType. Use ```is``` instead of ```==``` when comparing objects to None']}, {'cell_type': 'code', 'execution_count': 29, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['False']}, 'execution_count': 29, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['\"a monkey\" is None']}, {'cell_type': 'code', 'execution_count': 30, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['True']}, 'execution_count': 30, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['None is None']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"9aeb2da2-f038-4a3f-98e6-59904778009f","title":"Difference between is and ==","description":"the difference between the is and == operators in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Difference between is and ==\"\\n', 'description: \"the difference between the is and == operators in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['```is``` checks if two variables refer to the same object, but ```==``` checks if the objects pointed to have the same values']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['a = [1, 2, 3, 4]  \\n', 'b = a             # Point b at what a is pointing to\\n', 'b is a            # => True, a and b refer to the same object\\n', \"b == a            # => True, a's and b's objects are equal\"]}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['b = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\\n', 'b is a            # => False, a and b do not refer to the same object\\n', \"b == a            # => True, a's and b's objects are equal\"]}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"d0c67dd2-8069-4f7c-bd9f-b97edab6b5a5","title":"String Formatting and F Strings","description":"How to use the newest version of string formatting (f strings) and how to use the .format function for python versions < 3.6","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"String Formatting and F Strings\"\\n', 'description: \"How to use the newest version of string formatting (f strings) and how to use the .format function for python versions < 3.6\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"f string. format function\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': 44, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"'Tim has great hair.'\"]}, 'execution_count': 44, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# Note: f-strings are only in python versions 3.6+\\n', '#       they are faster and prefered over .format()\\n', 'name = \"Tim\"\\n', 'f\"{name} has great hair.\"']}, {'cell_type': 'code', 'execution_count': 45, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"'Jack be nimble, Jack be quick, Jack jump over the candle stick'\"]}, 'execution_count': 45, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# For python versions <3.6\\n', '\"{0} be nimble, {0} be quick, {0} jump over the {1}\".format(\"Jack\", \"candle stick\")']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## More on F Strings']}, {'cell_type': 'code', 'execution_count': 47, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"'tim is 3 characters long.'\"]}, 'execution_count': 47, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# You can basically put any Python statement inside the braces \\n', '# and it will be output in the string.\\n', 'f\"{name.lower()} is {len(name)} characters long.\"']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## More on .format']}, {'cell_type': 'code', 'execution_count': 20, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"'Strings can be interpolated'\"]}, 'execution_count': 20, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['\"{} can be {}\".format(\"Strings\", \"interpolated\")']}, {'cell_type': 'code', 'execution_count': 23, 'metadata': {}, 'outputs': [{'data': {'text\/plain': [\"'Jimmy likes to eat pie'\"]}, 'execution_count': 23, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['# You can use keywords\\n', '\"{name} likes to eat {food}\".format(name=\"Jimmy\", food=\"pie\")']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"3230dc28-3d13-4671-bff8-68b8eea7a4d8","title":"Set Union Operation","description":"Calculating the union of multiple sets with the set union operation in python.","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Set Union Operation\"\\n', 'description: \"Calculating the union of multiple sets with the set union operation in python.\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': ['some_set | other_set | another_one...']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'code', 'execution_count': 9, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['{1, 2, 3, 4, 5, 7, 8, 9, 11, 13, 15, 16}']}, 'execution_count': 9, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['primes = {2,3,5,7,11,13}\\n', 'odds = {1,3,5,7,9,11,13,15}\\n', 'pow2 = {2,4,8,16}\\n', 'primes | odds | pow2']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"cb0f4a73-35d5-43a1-8ce0-44faff6258fe","title":"Print in Python","description":"Understand how to use the print function in python","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Print in Python\"\\n', 'description: \"Understand how to use the print function in python\"\\n', 'tags: Python Fundamentals\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Key Code&']}, {'cell_type': 'markdown', 'metadata': {}, 'source': [\"## Python's print function is just ```print()```\"]}, {'cell_type': 'code', 'execution_count': 35, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': [\"I'm Python. Nice to meet you!\\n\"]}], 'source': ['print(\"I\\'m Python. Nice to meet you!\")']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## By default the print function also prints out a newline at the end. Use the optional argument end to change the end string.']}, {'cell_type': 'code', 'execution_count': 36, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['Hello, World!']}], 'source': ['print(\"Hello, World\", end=\"!\")']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]},{"uid":"4bc5e011-efc7-4ed7-bb52-0e520a971db1","title":"Difference Between Iterables and Iterators in Python","description":"Understanding the difference between iterables and iterators in python.","code":"{'cells': [{'cell_type': 'markdown', 'metadata': {}, 'source': ['---\\n', 'title: \"Difference Between Iterables and Iterators in Python\"\\n', 'description: \"Understanding the difference between iterables and iterators in python.\"\\n', 'tags: Python Fundamentals, Iteration\\n', 'URL: https:\/\/learnxinyminutes.com\/docs\/python3\/\\n', 'Licence: \\n', 'Creator: \\n', 'Meta: \"\"\\n', '\\n', '---']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['Python offers a fundamental abstraction called the Iterable. An **iterable** is an object that can be treated as a sequence. For example, the object returned by the range function is an iterable.']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['An **iterator** is an object which is used to iterate over an iterable object using the ```next()``` method. An iterator can be created from an iterable by calling the ```iter(iterable)``` method.']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['# Example&']}, {'cell_type': 'code', 'execution_count': 67, 'metadata': {}, 'outputs': [], 'source': ['our_iterable = [1,2,3]\\n', 'our_iterator = iter(our_iterable)']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## Our iterator is an object that can remember the state as we traverse through it. \\n', '## We get the next object with ```next()```.']}, {'cell_type': 'code', 'execution_count': 68, 'metadata': {}, 'outputs': [{'data': {'text\/plain': ['1']}, 'execution_count': 68, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['next(our_iterator)']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## It maintains state as we iterate']}, {'cell_type': 'code', 'execution_count': 69, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['2\\n', '3\\n']}], 'source': ['print(next(our_iterator))\\n', 'print(next(our_iterator))']}, {'cell_type': 'markdown', 'metadata': {}, 'source': ['## After the iterator has returned all of its data, it raises a StopIteration exception']}, {'cell_type': 'code', 'execution_count': 70, 'metadata': {}, 'outputs': [{'ename': 'StopIteration', 'evalue': '', 'output_type': 'error', 'traceback': ['\\x1b[0;31m---------------------------------------------------------------------------\\x1b[0m', '\\x1b[0;31mStopIteration\\x1b[0m                             Traceback (most recent call last)', '\\x1b[0;32m<ipython-input-70-8e34bf88350b>\\x1b[0m in \\x1b[0;36m<module>\\x1b[0;34m()\\x1b[0m\\n\\x1b[1;32m      1\\x1b[0m \\x1b[0;31m# After the iterator has returned all of its data, it raises a StopIteration exception\\x1b[0m\\x1b[0;34m\\x1b[0m\\x1b[0;34m\\x1b[0m\\x1b[0m\\n\\x1b[0;32m----> 2\\x1b[0;31m \\x1b[0mnext\\x1b[0m\\x1b[0;34m(\\x1b[0m\\x1b[0mour_iterator\\x1b[0m\\x1b[0;34m)\\x1b[0m\\x1b[0;34m\\x1b[0m\\x1b[0m\\n\\x1b[0m', '\\x1b[0;31mStopIteration\\x1b[0m: ']}], 'source': ['next(our_iterator)']}], 'metadata': {'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text\/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.6.7'}}, 'nbformat': 4, 'nbformat_minor': 2}","web_page":null,"access_internal":true,"access_alpha":false,"access_beta":false,"access_live":false,"tags":[]}]